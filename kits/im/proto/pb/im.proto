syntax = "proto3";
package pb;
option go_package = "github.com/doublemo/baa/kits/im/proto/pb";

message IM {
    message Msg { 
        enum Group {
            ToC = 0;
            ToG = 1;
        }

        message ContentType {
            message Text {
                string Content = 1;
            }

            message Video {
                uint64 ID        = 1; // 
                int32  Name      = 2; // 名称
                int32  Size      = 3; // 视频大小
                bytes  Thumbnail = 4; // 缩略图
                string Url       = 5; // 下载地址
            }

            message Image {
                uint64 ID     = 1; // 
                int32  Width  = 2; // 图宽
                int32  Height = 3; // 图高
                int32  Size   = 4; // 图大小
                bytes  Thumbnail= 5; // 缩略图
                int32  Name   = 6; // 名称
                string Url       = 7; // 下载地址
            }

            message Voice {
                string Url  = 1; // 下载地址
            }

            message File {
                uint64 ID     = 1; // 
                int32  Size   = 2; // 图大小
                string Type   = 3; // 
                int32  Name   = 4; // 图大小
            }

            message Emoticon {
                bytes   Content  = 1;
                string  Name     = 2; // 名称
            }
        }

        message Content {
            uint64 Id = 1;
            uint64 SeqID = 2;
            string To    = 3;
            string From  = 4;
            oneof Payload {
                ContentType.Text Text = 5;
                ContentType.Video Video = 6;
                ContentType.Image Image = 7;
                ContentType.Voice Voice = 8;
                ContentType.File File = 9;
                ContentType.Emoticon Emoticon = 10;
            }
            Group Group = 11;
            string Topic = 12;
        }

        message List {
            repeated Content Values = 1;
        }

        message AckListReceived{
            repeated AckReceived Successed = 1;
            repeated AckFailed Failed = 2;
        }

        message AckListReaded{
            repeated AckReaded Values = 1;
        }

        message AckListConfirmed{
            repeated AckConfirmed Values = 1;
        }

        message AckReceived {
            uint64 Id = 1;
            uint64 SeqID = 2;
            uint64 NewSeqID = 3;
        }

        message AckFailed {
            uint64 SeqID = 1;
            int32  ErrCode  = 2;
            string ErrMessage = 3;
        }


        message AckReaded {
            uint64 Id = 1;
            uint64 SeqID = 2;
        }

        message AckConfirmed {
            uint64 Id = 1;
            uint64 SeqID = 2;
        }
    } 


    message Send {
         Msg.List Messages = 1;
    }

    message Pull {
        Msg.List List = 1; 
    }

    message Notify {
        oneof Payload {
            Msg.AckListReceived Received = 1;
            Msg.AckListReaded Readed = 2;
            Msg.AckListConfirmed Confirmed = 3;
            Msg.List List = 4; 
        }
    }
    
}